# Configure appveyor for builds.
version: 3.5.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - master

environment:
  # Appveyor machines come with miniconda already installed.
  CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
  PYQT5_VERSION: 5.9.7
  QT_BASE_PATH: "C:\\QT\\5.9.7"
  # Need this to set up compilation on Windows.
  #CMD_IN_ENV: cmd /E:ON /V:ON /C Obvious-CI\scripts\obvci_appveyor_python_build_env.cmd

  # below the secure to upload to anaconda cloud
  # take the anaconda token generated from the command line
  # anaconda auth -n the_token_name --max-age 22896000 -c --scopes api
  # and copy paste to
  # https://ci.appveyor.com/tools/encrypt
  # then copy/paste the result below
  BINSTAR_TOKEN:
    secure: ogT8kvT5wdebz4QKH92LOdbLtq0QMCVSpYmvqhveKE/Nzi/zI7yxVgGlhqJrrKkU

  matrix:
    # Unfortunately, compiler/SDK configuration for 64 bit builds depends on
    # python version. Right now conda build does not configure the SDK, and
    # the appveyor setup only sets up the SDK once, so separate by python
    # versions.
   - TARGET_ARCH: "x64"
     PYTHON_BUILD_RESTRICTIONS: "3.6*"
     CONDA_PY: "36"
    # For 32 bit builds there are no compiler issues, let Obvious-CI
    # handle the matrix.
    # - TARGET_ARCH: "x86"
    #   PYTHON_BUILD_RESTRICTIONS: "2.7*|>=3.4"

# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

install:
    # Clone simply to get the script for setting up Windows build environment.
    #- cmd: git clone https://github.com/pelson/Obvious-CI.git

    # No need to install miniconda because appveyor comes with it.
    - cmd: SET PATH=%CONDA_INSTALL_LOCN%;%CONDA_INSTALL_LOCN%\Scripts;%QT_BASE_PATH%;%PATH%
    - cmd: conda -V
    - cmd: conda config --set always_yes true
    #- cmd: conda config --append channels conda-forge
    - cmd: conda clean --packages
    - cmd: conda update --quiet conda
    - cmd: conda install conda-build anaconda-client #conda-verify
    # Add for ruamel.yaml
    - cmd: conda config --append channels conda-forge
    - cmd: conda env create --name vaws_env --file vaws_win64_py3.6.7.yml
    - cmd: activate vaws_env
    - cmd: conda list
    # add path
    #- cmd: cd C:\projects\vaws\vaws\gui
    - cmd: SET PATH=%CONDA_PREFIX%\Lib\site-packages;%PATH%
    # pyuic5
    - cmd: cd C:\projects\vaws\vaws\gui
    #- cmd: del *_ui.py
    #- cmd: del vaws_rc.py
    # building UI
    - cmd: python.exe -m PyQt5.uic.pyuic --from-imports --output main_ui.py ui\main.ui
    - ps:  (gc main_ui.py) -replace 'from matplotlibwidget','from vaws.gui.matplotlibwidget' | Out-File -encoding ASCII main_ui.py
    - cmd: python.exe -m PyQt5.uic.pyuic ui\house.ui -o house_ui.py
    - cmd: python.exe -m PyQt5.pyrcc_main vaws.qrc > vaws_rc.py
    - cmd: cd C:\projects\vaws
# Skip .NET project specific build phase.
build: off

test_script:
    # Not much of a real test yet, just try to build myself...
    - cmd: python -m unittest -v

on_success:
    - cmd: conda activate base
    - cmd: conda list
    - cmd: cd C:\projects\vaws\recipe
    - cmd: conda config --set anaconda_upload no
    - cmd: conda-build %CD% --output > to_upload.txt
    - cmd: SET /P BUILT_PACKAGE=<to_upload.txt
    - cmd: DEL to_upload.txt
    - cmd: conda build purge
    - cmd: conda build . --numpy=1.16 --python=3.6
    - cmd: if exist %BUILT_PACKAGE% anaconda --token %BINSTAR_TOKEN% upload -u dynaryu %BUILT_PACKAGE% --force
