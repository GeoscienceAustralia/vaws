
..
  # with overline, for parts
  * with overline, for chapters
  =, for sections
  -, for subsections
  ^, for subsubsections
  ", for paragraphs

*************
Program Logic
*************

This chapter describes the logic of the program.

Overall logic
=============

The program is built around the following high level sequence:

1. Create a group of models by random sampling

  - For each model (:py:class:`.House`)

    * sample wind direction (:py:meth:`.House.set_wind_orientation`)
    * sample wind profile (:py:meth:`.House.set_wind_profile`)
    * sample construction quality level (:py:meth:`.House.set_construction_level`)
    * set up coverages given the wind direction (:py:meth:`.House.set_coverages`)
    * set up connections (:py:meth:`.House.set_connections`)
    * set up zones (:py:meth:`.House.set_zones`)
    * set up debris generation model (:py:meth:`.House.set_debris`)

2. Calculate damage indices of the models over a range of wind speeds

  - For each wind speed

    - calculate damage index for each model (:py:meth:`.HouseDamage.run_simulation`)

      - assign the increment in the mean damage index from the previous wind step as an input to the debris generation model (:py:attr:`.Debris.no_items_mean`)
      - calculate free stream wind pressure (qz), optionally applying a regional shielding factor (:py:meth:`.HouseDamage.compute_qz_ms`)
      - calculate zone pressures from qz (:py:meth:`.Zone.calc_zone_pressure`)
      - check damage of envelope coverages by wind load (:py:meth:`.Coverage.check_damage`)
      - calculate connection loads (:py:meth:`.Connection.compute_load`)
      - check damage of each connection by connection group (:py:meth:`.ConnectionTypeGroup.check_damage`)
      - check damage and compute damaged area by connection group (:py:meth:`.ConnectionTypeGroup.compute_damaged_area`)
      - update influence by connection group (:py:meth:`.ConnectionTypeGroup.update_influence`)
      - check for total house collapse event (:py:meth:`.HouseDamage.check_house_collapse`)
      - compute damage index of the model (:py:meth:`.HouseDamage.compute_damage_index`)
      - compute damage index of the model (:py:meth:`.HouseDamage.compute_damage_index`)
      - generate debris and update Cpi in case of internal pressurisation event (:py:meth:`.HouseDamage.check_internal_pressurisation`)
    - calculate increment in mean damage index of the group of models (:py:func:`.update_bucket`)

3. Fit fragility and vulnerability curves and save outputs (:py:func:`.save_results_to_files`)


Detailed logic
==============



-. Generate debris and check any breach by debris
-. Update cpi in case of internal pressurization event


-. determine footprint and coverages given the wind direction
-. sample cpe and calculate pressure
-. sample construction quality level and determine factors applied to mean and cov of strength
-. sample connection strength and dead load

Debris damage module
--------------------

The methdology of modelling damage from wind-borne debris implemented in the code is described in the [JDH2010d_] and [JDH2010d_]. The debris damage module consists of four parts: 1) debris generation, 2) debris trajectory, 3) debris impact, and 4) debris damage costing.

Debris generation
^^^^^^^^^^^^^^^^^

The mean number of debris items to be generated (:math:`N_{mean}) is calculated by :eq:`number_of_debris_items_eq`.

.. math::
    :label: number_of_debris_items_eq

    N_{mean} = \text{nint} \left( \Delta{DI} \times N_{items} \right)

where :math:`\Delta{DI}`:, :math:`\Delta{DI}`:, :math:`\Delta{DI}`: increment in damage index from previous wind step, :math:`B`: base cost, and :math:`C`: costing function. Like the damage costing functions, two types of costing functions are defined as :eq:`costing_function_types`.


The debris sources are generated by calling :py:meth:`.Debris.create_sources`, which requires a number of parameters as shown in the :numref:`debris_source_parameters_fig`.

.. _debris_source_parameters_fig:
.. figure:: _static/image/debris_source_parameters.png
    :align: center
    :width: 80 %

    Distribution of debris sources with parameters

Depending on the value for *staggered_sources*, :numref:`debris_source_staggered_true_fig` and :numref:`debris_source_staggered_false_fig` are displayed.

..
  .. literalinclude:: ../../vaws/model/debris.py
     :language: python
     :pyobject: Debris.create_sources

.. _debris_source_staggered_true_fig:
.. figure:: _static/image/source_staggered_true.png
    :align: center
    :width: 70 %

    Distribution of debris source buildings generated with debris_radius = 100.0 (m), debris_angle = 45.0 (deg), debris_space = 20.0 (m), and staggered_sources = *True*.

.. _debris_source_staggered_false_fig:
.. figure:: _static/image/source_staggered_false.png
    :align: center
    :width: 70 %

    Distribution of debris source buildings generated with debris_radius = 100.0 (m), debris_angle = 45.0 (deg), debris_space = 20.0 (m), and staggered_sources = *False*.


Water ingress
-------------


.. _water_ingress:
.. figure:: _static/image/water_ingress.png
    :align: center
    :width: 70 %

    water ingress vs. wind speed for various damage index values.


Cpe
---

Note that Cpe is used in computing zone pressures, and is sampled from Type III extreme value distribution (or Weibull) (:py:meth:`.stats.sample_gev`)

.. math::

    F(x; u, a, k) = \exp\left[-\left(1-k\frac{x-u}{a}\right)^{\frac{1}{k}}\right]

where :math:`u`: location factor (:math:`\in \rm I\!R`), :math:`a`: scale factor (:math:`> 0`), and :math:`k`: shape factor (:math:`> 0`). The mean and variance are calculated as follows:

.. math::

    \text{mean} &= u + \frac{a}{k}\left[1-\Gamma(1+k)\right] \\
    \text{variance} &= (\frac{a}{k})^{2}\left[\Gamma(1+2k)-\Gamma^{2}(1+k)\right]


The :math:`u` and :math:`a` are estimated given cov and :math:`k` values:

.. math::

    a &= \text{mean} \times \frac{\text{cov}}{B} \\
    u &= \text{mean} - a \times A

where :math:`A=1/k\left(1-\Gamma(1+k)\right)`, and :math:`B=(1/k)\sqrt{\Gamma(1+2k)-\Gamma^{2}(1+k)}`.


Costing damage
--------------

ix. cost damage
1. Calculate percentage of damaged area per connection group.
2. Translate percentage into repair cost via damage scenarios.
3. cost damage from water ingress if required
4. calculate damage index
