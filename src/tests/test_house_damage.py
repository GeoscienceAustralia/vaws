#!/usr/bin/env python
from __future__ import print_function

import unittest
import os
import StringIO
import pandas as pd

from vaws.house_damage import HouseDamage
from vaws.config import Config


class TestHouseDamage(unittest.TestCase):
    @classmethod
    def setUpClass(cls):

        path = '/'.join(__file__.split('/')[:-1])
        cls.path_reference = path

        cls.cfg = Config(
            cfg_file=os.path.join(path,
                                  '../../scenarios/test_scenario15/test_scenario15.cfg'))

        cls.house_damage = HouseDamage(cfg=cls.cfg, seed=1)
        cls.house_damage.house.replace_cost = 45092.97

        # def test_calculate_qz(self):

        # self.assertEqual(self.house_damage.house.height, 4.5)
        # self.assertEqual(self.cfg.terrain_category, '2')

        # self.house_damage.set_wind_profile()
        # self.assertEqual(self.house_damage.profile, 5)
        # self.assertAlmostEqual(self.house_damage.mzcat, 0.9425, places=4)
        #
        # # regional_shielding_factor > 0.85
        # self.house_damage.regional_shielding_factor = 1.0
        # self.house_damage.calculate_qz(10.0)
        # self.assertAlmostEqual(self.house_damage.qz, 0.05472, places=4)
        #
        # # regional_shielding_factor < 0.85
        # self.house_damage.regional_shielding_factor = 0.5
        # self.house_damage.calculate_qz(10.0)
        # self.assertAlmostEqual(self.house_damage.qz, 0.21888, places=4)

    def test_calculate_damage_ratio(self):

        repair_cost_by_group = StringIO.StringIO("""
dmg_ratio_sheeting,dmg_ratio_batten,dmg_ratio_rafter,loss_ratio
0,0,0,0
0.2,0,0,0.053454931
0.4,0,0,0.096360869
0.6,0,0,0.131493631
0.8,0,0,0.161629032
1,0,0,0.189542886
0,0.2,0,0.136022125
0.2,0.2,0,0.136022125
0.4,0.2,0,0.189477056
0.6,0.2,0,0.232382994
0.8,0.2,0,0.267515756
1,0.2,0,0.297651157
0,0.4,0,0.245201146
0.2,0.4,0,0.245201146
0.4,0.4,0,0.245201146
0.6,0.4,0,0.298656076
0.8,0.4,0,0.341562015
1,0.4,0,0.376694777
0,0.6,0,0.334600438
0.2,0.6,0,0.334600438
0.4,0.6,0,0.334600438
0.6,0.6,0,0.334600438
0.8,0.6,0,0.388055368
1,0.6,0,0.430961307
0,0.8,0,0.411283377
0.2,0.8,0,0.411283377
0.4,0.8,0,0.411283377
0.6,0.8,0,0.411283377
0.8,0.8,0,0.411283377
1,0.8,0,0.464738308
0,1,0,0.482313341
0.2,1,0,0.482313341
0.4,1,0,0.482313341
0.6,1,0,0.482313341
0.8,1,0,0.482313341
1,1,0,0.482313341
0,0,0.2,0.244454103
0.2,0,0.2,0.244454103
0.4,0,0.2,0.296846028
0.6,0,0.2,0.339956232
0.8,0,0.2,0.375231574
1,0,0.2,0.40544787
0,0.2,0.2,0.244454103
0.2,0.2,0.2,0.244454103
0.4,0.2,0.2,0.244454103
0.6,0.2,0.2,0.296846028
0.8,0.2,0.2,0.339956232
1,0.2,0.2,0.375231574
0,0.4,0.2,0.377771291
0.2,0.4,0.2,0.377771291
0.4,0.4,0.2,0.377771291
0.6,0.4,0.2,0.377771291
0.8,0.4,0.2,0.430163216
1,0.4,0.2,0.47327342
0,0.6,0.2,0.487470087
0.2,0.6,0.2,0.487470087
0.4,0.6,0.2,0.487470087
0.6,0.6,0.2,0.487470087
0.8,0.6,0.2,0.487470087
1,0.6,0.2,0.539862012
0,0.8,0.2,0.57723219
0.2,0.8,0.2,0.57723219
0.4,0.8,0.2,0.57723219
0.6,0.8,0.2,0.57723219
0.8,0.8,0.2,0.57723219
1,0.8,0.2,0.57723219
0,1,0.2,0.654120978
0.2,1,0.2,0.654120978
0.4,1,0.2,0.654120978
0.6,1,0.2,0.654120978
0.8,1,0.2,0.654120978
1,1,0.2,0.654120978
0,0,0.4,0.460368018
0.2,0,0.4,0.460368018
0.4,0,0.4,0.460368018
0.6,0,0.4,0.511691698
0.8,0,0.4,0.555007538
1,0,0.4,0.590426831
0,0.2,0.4,0.460368018
0.2,0.2,0.4,0.460368018
0.4,0.2,0.4,0.460368018
0.6,0.2,0.4,0.460368018
0.8,0.2,0.4,0.511691698
1,0.2,0.4,0.555007538
0,0.4,0.4,0.460368018
0.2,0.4,0.4,0.460368018
0.4,0.4,0.4,0.460368018
0.6,0.4,0.4,0.460368018
0.8,0.4,0.4,0.460368018
1,0.4,0.4,0.511691698
0,0.6,0.4,0.590966935
0.2,0.6,0.4,0.590966935
0.4,0.6,0.4,0.590966935
0.6,0.6,0.4,0.590966935
0.8,0.6,0.4,0.590966935
1,0.6,0.4,0.590966935
0,0.8,0.4,0.701188995
0.2,0.8,0.4,0.701188995
0.4,0.8,0.4,0.701188995
0.6,0.8,0.4,0.701188995
0.8,0.8,0.4,0.701188995
1,0.8,0.4,0.701188995
0,1,0.4,0.791317398
0.2,1,0.4,0.791317398
0.4,1,0.4,0.791317398
0.6,1,0.4,0.791317398
0.8,1,0.4,0.791317398
1,1,0.4,0.791317398
0,0,0.6,0.655553624
0.2,0,0.6,0.655553624
0.4,0,0.6,0.655553624
0.6,0,0.6,0.655553624
0.8,0,0.6,0.705803789
1,0,0.6,0.749326635
0,0.2,0.6,0.655553624
0.2,0.2,0.6,0.655553624
0.4,0.2,0.6,0.655553624
0.6,0.2,0.6,0.655553624
0.8,0.2,0.6,0.655553624
1,0.2,0.6,0.705803789
0,0.4,0.6,0.655553624
0.2,0.4,0.6,0.655553624
0.4,0.4,0.6,0.655553624
0.6,0.4,0.6,0.655553624
0.8,0.4,0.6,0.655553624
1,0.4,0.6,0.655553624
0,0.6,0.6,0.655553624
0.2,0.6,0.6,0.655553624
0.4,0.6,0.6,0.655553624
0.6,0.6,0.6,0.655553624
0.8,0.6,0.6,0.655553624
1,0.6,0.6,0.655553624
0,0.8,0.6,0.783420859
0.2,0.8,0.6,0.783420859
0.4,0.8,0.6,0.783420859
0.6,0.8,0.6,0.783420859
0.8,0.8,0.6,0.783420859
1,0.8,0.6,0.783420859
0,1,0.6,0.894169671
0.2,1,0.6,0.894169671
0.4,1,0.6,0.894169671
0.6,1,0.6,0.894169671
0.8,1,0.6,0.894169671
1,1,0.6,0.894169671
0,0,0.8,0.837822799
0.2,0,0.8,0.837822799
0.4,0,0.8,0.837822799
0.6,0,0.8,0.837822799
0.8,0,0.8,0.837822799
1,0,0.8,0.886994147
0,0.2,0.8,0.837822799
0.2,0.2,0.8,0.837822799
0.4,0.2,0.8,0.837822799
0.6,0.2,0.8,0.837822799
0.8,0.2,0.8,0.837822799
1,0.2,0.8,0.837822799
0,0.4,0.8,0.837822799
0.2,0.4,0.8,0.837822799
0.4,0.4,0.8,0.837822799
0.6,0.4,0.8,0.837822799
0.8,0.4,0.8,0.837822799
1,0.4,0.8,0.837822799
0,0.6,0.8,0.837822799
0.2,0.6,0.8,0.837822799
0.4,0.6,0.8,0.837822799
0.6,0.6,0.8,0.837822799
0.8,0.6,0.8,0.837822799
1,0.6,0.8,0.837822799
0,0.8,0.8,0.837822799
0.2,0.8,0.8,0.837822799
0.4,0.8,0.8,0.837822799
0.6,0.8,0.8,0.837822799
0.8,0.8,0.8,0.837822799
1,0.8,0.8,0.837822799
0,1,0.8,0.962944864
0.2,1,0.8,0.962944864
0.4,1,0.8,0.962944864
0.6,1,0.8,0.962944864
0.8,1,0.8,0.962944864
1,1,0.8,0.962944864
0,0,1,1
0.2,0,1,1
0.4,0,1,1
0.6,0,1,1
0.8,0,1,1
1,0,1,1
0,0.2,1,1
0.2,0.2,1,1
0.4,0.2,1,1
0.6,0.2,1,1
0.8,0.2,1,1
1,0.2,1,1
0,0.4,1,1
0.2,0.4,1,1
0.4,0.4,1,1
0.6,0.4,1,1
0.8,0.4,1,1
1,0.4,1,1
0,0.6,1,1
0.2,0.6,1,1
0.4,0.6,1,1
0.6,0.6,1,1
0.8,0.6,1,1
1,0.6,1,1
0,0.8,1,1
0.2,0.8,1,1
0.4,0.8,1,1
0.6,0.8,1,1
0.8,0.8,1,1
1,0.8,1,1
0,1,1,1
0.2,1,1,1
0.4,1,1,1
0.6,1,1,1
0.8,1,1,1
1,1,1,1""")

        ref_dat = pd.read_csv(repair_cost_by_group)

        for _, item in ref_dat.iterrows():

            # assign damage area
            for group_name, group in self.house_damage.house.groups.iteritems():
                group.damaged_area = item['dmg_ratio_{}'.format(
                    group.name)] * group.costing_area

            self.house_damage.compute_damage_index(20.0)

            self.assertAlmostEqual(self.house_damage.di,
                                   min(item['loss_ratio'], 1.0),
                                   places=4)


class TestHouseDamage2(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        path = '/'.join(__file__.split('/')[:-1])
        cls.path_reference = path

        cls.cfg = Config(
            cfg_file=os.path.join(path,
                                  '../../scenarios/group4/carl1.cfg'))

        cls.house_damage = HouseDamage(cfg=cls.cfg, seed=1)
        cls.house_damage.house.replace_cost = 198859.27

    def test_calculate_damage_ratio_including_debris(self):

        repair_cost_by_group = StringIO.StringIO("""
dmg_ratio_debris,dmg_ratio_wallcladding,dmg_ratio_wallcollapse,loss_ratio
0,0,0,0
0.2,0,0,0.062253424
0.4,0,0,0.105804727
0.6,0,0,0.139197262
0.8,0,0,0.170974382
1,0,0,0.209679439
0,0.2,0,0.039520371
0.2,0.2,0,0.062253424
0.4,0.2,0,0.105804727
0.6,0.2,0,0.139197262
0.8,0.2,0,0.170974382
1,0.2,0,0.209679439
0,0.4,0,0.067528499
0.2,0.4,0,0.099835942
0.4,0.4,0,0.105804727
0.6,0.4,0,0.139197262
0.8,0.4,0,0.170974382
1,0.4,0,0.209679439
0,0.6,0,0.092382143
0.2,0.6,0,0.12813243
0.4,0.6,0,0.14141956
0.6,0.6,0,0.139197262
0.8,0.6,0,0.170974382
1,0.6,0,0.209679439
0,0.8,0,0.115386016
0.2,0.8,0,0.153133004
0.4,0.8,0,0.170022014
0.6,0.8,0,0.172811915
0.8,0.8,0,0.170974382
1,0.8,0,0.209679439
0,1,0,0.137105517
0.2,1,0,0.176232756
0.4,1,0,0.195174409
0.6,1,0,0.201740097
0.8,1,0,0.20255323
1,1,0,0.209679439
0,0,0.2,0.110557571
0.2,0,0.2,0.110557571
0.4,0,0.2,0.166702558
0.6,0,0.2,0.211987823
0.8,0,0.2,0.246121879
1,0,0.2,0.277648077
0,0.2,0.2,0.110557571
0.2,0.2,0.2,0.110557571
0.4,0.2,0.2,0.166702558
0.6,0.2,0.2,0.211987823
0.8,0.2,0.2,0.246121879
1,0.2,0.2,0.277648077
0,0.4,0.2,0.144251563
0.2,0.4,0.2,0.110557571
0.4,0.4,0.2,0.166702558
0.6,0.4,0.2,0.211987823
0.8,0.4,0.2,0.246121879
1,0.4,0.2,0.277648077
0,0.6,0.2,0.173166526
0.2,0.6,0.2,0.142217225
0.4,0.6,0.2,0.166702558
0.6,0.6,0.2,0.211987823
0.8,0.6,0.2,0.246121879
1,0.6,0.2,0.277648077
0,0.8,0.2,0.198469662
0.2,0.8,0.2,0.171479327
0.4,0.8,0.2,0.196288684
0.6,0.8,0.2,0.211987823
0.8,0.8,0.2,0.246121879
1,0.8,0.2,0.277648077
0,1,0.2,0.221763918
0.2,1,0.2,0.196944798
0.4,1,0.2,0.225923271
0.6,1,0.2,0.239456769
0.8,1,0.2,0.246121879
1,1,0.2,0.277648077
0,0,0.4,0.240212739
0.2,0,0.4,0.240212739
0.4,0,0.4,0.240212739
0.6,0,0.4,0.289983523
0.8,0,0.4,0.337118038
1,0,0.4,0.372108901
0,0.2,0.4,0.240212739
0.2,0.2,0.4,0.240212739
0.4,0.2,0.4,0.240212739
0.6,0.2,0.4,0.289983523
0.8,0.2,0.4,0.337118038
1,0.2,0.4,0.372108901
0,0.4,0.4,0.240212739
0.2,0.4,0.4,0.240212739
0.4,0.4,0.4,0.240212739
0.6,0.4,0.4,0.289983523
0.8,0.4,0.4,0.337118038
1,0.4,0.4,0.372108901
0,0.6,0.4,0.267765864
0.2,0.6,0.4,0.240212739
0.4,0.6,0.4,0.240212739
0.6,0.6,0.4,0.289983523
0.8,0.6,0.4,0.337118038
1,0.6,0.4,0.372108901
0,0.8,0.4,0.297785697
0.2,0.8,0.4,0.265601601
0.4,0.8,0.4,0.240212739
0.6,0.8,0.4,0.289983523
0.8,0.8,0.4,0.337118038
1,0.8,0.4,0.372108901
0,1,0.4,0.323586937
0.2,1,0.4,0.296055609
0.4,1,0.4,0.263381631
0.6,1,0.4,0.289983523
0.8,1,0.4,0.337118038
1,1,0.4,0.372108901
0,0,0.6,0.388286952
0.2,0,0.6,0.388286952
0.4,0,0.6,0.388286952
0.6,0,0.6,0.388286952
0.8,0,0.6,0.431404374
1,0,0.6,0.480503426
0,0.2,0.6,0.388286952
0.2,0.2,0.6,0.388286952
0.4,0.2,0.6,0.388286952
0.6,0.2,0.6,0.388286952
0.8,0.2,0.6,0.431404374
1,0.2,0.6,0.480503426
0,0.4,0.6,0.388286952
0.2,0.4,0.6,0.388286952
0.4,0.4,0.6,0.388286952
0.6,0.4,0.6,0.388286952
0.8,0.4,0.6,0.431404374
1,0.4,0.6,0.480503426
0,0.6,0.6,0.388286952
0.2,0.6,0.6,0.388286952
0.4,0.6,0.6,0.388286952
0.6,0.6,0.6,0.388286952
0.8,0.6,0.6,0.431404374
1,0.6,0.6,0.480503426
0,0.8,0.6,0.409262628
0.2,0.8,0.6,0.388286952
0.4,0.8,0.6,0.388286952
0.6,0.8,0.6,0.388286952
0.8,0.8,0.6,0.431404374
1,0.8,0.6,0.480503426
0,1,0.6,0.4406908
0.2,1,0.6,0.406905352
0.4,1,0.6,0.388286952
0.6,1,0.6,0.388286952
0.8,1,0.6,0.431404374
1,1,0.6,0.480503426
0,0,0.8,0.554101659
0.2,0,0.8,0.554101659
0.4,0,0.8,0.554101659
0.6,0,0.8,0.554101659
0.8,0,0.8,0.554101659
1,0,0.8,0.590273167
0,0.2,0.8,0.554101659
0.2,0.2,0.8,0.554101659
0.4,0.2,0.8,0.554101659
0.6,0.2,0.8,0.554101659
0.8,0.2,0.8,0.554101659
1,0.2,0.8,0.590273167
0,0.4,0.8,0.554101659
0.2,0.4,0.8,0.554101659
0.4,0.4,0.8,0.554101659
0.6,0.4,0.8,0.554101659
0.8,0.4,0.8,0.554101659
1,0.4,0.8,0.590273167
0,0.6,0.8,0.554101659
0.2,0.6,0.8,0.554101659
0.4,0.6,0.8,0.554101659
0.6,0.6,0.8,0.554101659
0.8,0.6,0.8,0.554101659
1,0.6,0.8,0.590273167
0,0.8,0.8,0.554101659
0.2,0.8,0.8,0.554101659
0.4,0.8,0.8,0.554101659
0.6,0.8,0.8,0.554101659
0.8,0.8,0.8,0.554101659
1,0.8,0.8,0.590273167
0,1,0.8,0.567811206
0.2,1,0.8,0.554101659
0.4,1,0.8,0.554101659
0.6,1,0.8,0.554101659
0.8,1,0.8,0.554101659
1,1,0.8,0.590273167
0,0,1,0.736978308
0.2,0,1,0.736978308
0.4,0,1,0.736978308
0.6,0,1,0.736978308
0.8,0,1,0.736978308
1,0,1,0.736978308
0,0.2,1,0.736978308
0.2,0.2,1,0.736978308
0.4,0.2,1,0.736978308
0.6,0.2,1,0.736978308
0.8,0.2,1,0.736978308
1,0.2,1,0.736978308
0,0.4,1,0.736978308
0.2,0.4,1,0.736978308
0.4,0.4,1,0.736978308
0.6,0.4,1,0.736978308
0.8,0.4,1,0.736978308
1,0.4,1,0.736978308
0,0.6,1,0.736978308
0.2,0.6,1,0.736978308
0.4,0.6,1,0.736978308
0.6,0.6,1,0.736978308
0.8,0.6,1,0.736978308
1,0.6,1,0.736978308
0,0.8,1,0.736978308
0.2,0.8,1,0.736978308
0.4,0.8,1,0.736978308
0.6,0.8,1,0.736978308
0.8,0.8,1,0.736978308
1,0.8,1,0.736978308
0,1,1,0.736978308
0.2,1,1,0.736978308
0.4,1,1,0.736978308
0.6,1,1,0.736978308
0.8,1,1,0.736978308
1,1,1,0.736978308""")

        ref_dat = pd.read_csv(repair_cost_by_group)

        for _, item in ref_dat.iterrows():

            self.house_damage.house.debris.damaged_area = item[
                                                              'dmg_ratio_debris'] * self.cfg.coverages_area

            # assign damage area
            for group_name, group in self.house_damage.house.groups.iteritems():

                if group.name in ['wallcladding', 'wallcollapse']:
                    group.damaged_area = item['dmg_ratio_{}'.format(
                        group.name)] * group.costing_area
                else:
                    group.damaged_area = 0.0

            self.house_damage.compute_damage_index(20.0)

            try:
                self.assertAlmostEqual(self.house_damage.di,
                                       min(item['loss_ratio'], 1.0), places=4)
            except AssertionError:
                print('{} vs {}'.format(self.house_damage.di, item))


if __name__ == '__main__':
    unittest.main()
    # suite = unittest.TestLoader().loadTestsFromTestCase(TestHouseDamage2)
    # unittest.TextTestRunner(verbosity=2).run(suite)
